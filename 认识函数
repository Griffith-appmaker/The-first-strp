#                   》》如何创建函数

def math(a):
    y = a + 1
    return y 
print(math(2))
#>> 返回3


#                   》》多个变量的函数

def menu( rice , soup , dessert = '绿豆沙' ):
    print('主食是：' + rice) 
    print('汤品是：' + soup)
    print('小吃是：' + dessert)
#>> 在当前函数中，绿豆沙是默认每次都一样的（假设我们目前只有绿豆沙，免费送），提前赋值的变量要放在所有变量后面
print(menu('白米饭'，'紫菜汤'))
#>> 因为绿豆沙默认，所以会直接打印上述三者
print(menu('紫菜汤','白米饭'))
#>> 此时会出现主食是紫菜汤，汤品是白米饭
#>> 利用位置直接赋值函数有这个风险，如果使用直接赋值则不会受位置影响
print(menu(soup='紫菜汤',rice='白米饭'))
#>> 甜品虽然已经赋值了默认绿豆沙，但是只要填写了该值，仍然可以修改
print(menu('白米饭' , '紫菜汤' , '红豆沙'))


#                   》》变量数量无限的函数
#>>适用于当我们不知道变量数量可能有多少的时候
def menu(*BBQ):
#>>BBQ前面加的*表示变量数量无限
    for i in menu:
        print(i)
#>> *BBQ 输出的整串内容是以元组的形式出现    ('a','b','c')
#>> 所以可以用 for 循环进行遍历
#>> 当输出新的内容后，上一个元组便会被覆盖

#                   》》函数返回多个值
import random 
appetizer = ['话梅花生','拍黄瓜','凉拌三丝']
def coupon(money):
    if money < 5:
        a = random.choice(appetizer)
        return a
    elif 5 <= money < 10:
        b = random.choice (appetizer)
        return b, '溏心蛋'
#>> return a,b 就会返回a,b
result = coupon (6)
#>> 此时有随机赠品和溏心蛋
dish,egg = coupon(6)
#>> 上面这串代码表示给coupon(6)中的两个值赋予变量名（按顺序）相当于赋值（只不过值已经提前知道了，在元组中）
print(dish)
print(egg)

#                   》》多个函数使用时的变量套换
#>>局部变量：在某个函数里面出现的变量，在下一个函数中不能直接引用
#>>全局变量：在所有函数外出现的变量（先赋值为0也算），在各个函数之间可以直接引用，通过a函数更新了值以后，可以在b函数中使用
#>>有些时候代码较长，难以在一开始想到所有全局变量，则可以使用 global 函数
def menu():
    global people
    people = input('请问有几个人就餐：')
#>>这样people这个局部变量就变成了全局变量

#                   》》print函数的本来面目
print(*objects, sep = ' ', end = '\n', file = sys.stdout, flush = False)
#>> 从中可以利用的点
#>> 1. print函数使用*objects来实现不限制输入内容的目的
#>> 2. sep = ' ' 表示的是字符之间用空格来间隔开（引号内有一个空格），如果你把它换成其他符号，那么字符之间就会有其他符号
#>> 3. end = '\n' 表示的是当一次输入结束后，默认进行换行，如果你把这个换成别的...比如换成'！！！'，那么这个句子后面就会默认加上'！！！'



